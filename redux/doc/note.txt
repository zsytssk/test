## 2017-12-28 09:16:25
> array reducers
mapStateToProps
> 会将State中的值和props联系 如果state中对应值发生改变 props会相应改变
mapDispatchToProps
> 会将props和dispatch联系在一起

* 如果我知道两者的原理，对我本身的connect应该很有帮助
> 只是将现有的值和原来的值进行比较

* redux devtool 中如何对比 state的区别


## 2017-12-22 09:47:44
* @ques 假如每一个数据都有一个id来确定唯一 那么如何通过这个id来寻找到相应的数据呢？？
> 张俊清 如何找到数组中的元素

* @ques 如何connect 特定的一个值得改变 subscribe

* mapStateToProps mapDispatchToProps 如何作用

* compose 组合函数

## 2017-12-21 09:46:56
* redux 的优点
> state只是一个数据结构可以 自由使用 复用
> debug
> maintain undo hostory



## 2017-12-20 09:48:59

* @ques 我如何知道一个对象需不需要监听

const posts = (...) => {
  ...
}
const postsBySubreddit = (...) => {
  ...
}
const rootReducer = combineReducers({
  postsBySubreddit,
  selectedSubreddit
})


mapStateToProps
const mapStateToProps = (state) => ({
   specificProperty: state.specificProperty,
   // any props you need else
});

class YourComponent extends React.Component {
    render() {
      // render your component
    }

    componentWillUpdate(nextProps) {
        if (nextProps.specificProperty !== prevProps.specificProperty) {
            // Do whatever you want
        }
    }
}

YourComponent = connect(mapStateToProps)(YourComponent);

mapDispatchToProps


store.pairwise().subscribe((previousState, state) => {
  console.log(previousState);
  console.log(state);
});

function observeStore(store, select, onChange) {
  let currentState;

  function handleChange() {
    let nextState = select(store.getState());
    if (nextState !== currentState) {
      currentState = nextState;
      onChange(currentState);
    }
  }

  let unsubscribe = store.subscribe(handleChange);
  handleChange();
  return unsubscribe;
}

* @note 张笑的connect其实就是比较新旧两个store

## 2017/07/19 09:40
-| 我在使用redux的时候如何根据store的变化修改内容, 如何根据store特定的修改 更新特定的view
-> ...
->



-? switch语句和一个对象 同样可以定义一个reducer。。。？？？
function todoApp(state = initialState, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return Object.assign({}, state, {
        visibilityFilter: action.filter
      })
    case ADD_TODO:
    case TOGGLE_TODO:
      return Object.assign({}, state, {
        todos: todos(state.todos, action)
      })
    default:
      return state
  }
}

function todoApp(state = {}, action) {
  return {
    visibilityFilter: visibilityFilter(state.visibilityFilter, action),
    todos: todos(state.todos, action)
  }
}
下面这个还处理state的一部分 state.todos state.visibilityFilter

这对开发同构应用时非常有用，服务器端 redux 应用的 state 结构可以与客户端保持一致, 那么客户端可以将从网络接收到的服务端 state 直接用于本地数据初始化。
这是我想要的一切...

## 2017/07/18 17:09
-| 用户改变state的流程:> action:> reducer:> 改变state
->


## redux的结构
用户行为:> action:> reducer:> state

-? 看简单的事例
-> counter
-> http://cn.redux.js.org/docs/basics/Actions.html

## 2017/07/18 09:36
-?  这是什么意思PropTypes.func.isRequired

-? TodoTextInput:> Header:>App:> todo:> reducer
addTodo = text => ({ type: types.ADD_TODO, text });
type的第一个

(id, text) => ({ type: types.EDIT_TODO, id, text })
==
(function (id, text) {
  return { type: types.EDIT_TODO, id: id, text: text };
});

@note 这个很奇怪 es6 对象属性同名赋值


-? action 如何传递到reducer上面的
-> ...?
-> 找囧请

